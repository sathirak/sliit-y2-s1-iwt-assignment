/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.104
 * Generated at: 2025-05-10 07:14:40 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.*;
import reservation.ReservationModel;

public final class reservations_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(1);
    _jspx_dependants.put("/common/header.jsp", Long.valueOf(1746861241295L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(6);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(2);
    _jspx_imports_classes.add("reservation.ReservationModel");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("    <meta charset=\"UTF-8\">\r\n");
      out.write("    <title>All Reservations</title>\r\n");
      out.write("    <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css\" rel=\"stylesheet\">\r\n");
      out.write("</head>\r\n");
      out.write("<body class=\"bg-light\">\r\n");
      out.write("\r\n");
      out.write("<nav class=\"navbar navbar-expand-lg navbar-dark bg-dark mb-4\">\r\n");
      out.write("    <div class=\"container\">\r\n");
      out.write("        <a class=\"navbar-brand\" href=\"");
      out.print( request.getContextPath() );
      out.write("/home\">\r\n");
      out.write("            <strong>CARSONES</strong> Rental\r\n");
      out.write("        </a>\r\n");
      out.write("        <button class=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarMain\">\r\n");
      out.write("            <span class=\"navbar-toggler-icon\"></span>\r\n");
      out.write("        </button>\r\n");
      out.write("        <div class=\"collapse navbar-collapse\" id=\"navbarMain\">\r\n");
      out.write("            <ul class=\"navbar-nav me-auto\">\r\n");
      out.write("                <li class=\"nav-item\">\r\n");
      out.write("                    <a class=\"nav-link ");
      out.print( request.getServletPath().contains("reservation") ? "active" : "" );
      out.write("\" \r\n");
      out.write("                       href=\"");
      out.print( request.getContextPath() );
      out.write("/reservation\">Reservations</a>\r\n");
      out.write("                </li>\r\n");
      out.write("                <li class=\"nav-item\">\r\n");
      out.write("                    <a class=\"nav-link ");
      out.print( request.getServletPath().contains("user") ? "active" : "" );
      out.write("\" \r\n");
      out.write("                       href=\"");
      out.print( request.getContextPath() );
      out.write("/user\">Users</a>\r\n");
      out.write("                </li>\r\n");
      out.write("                <li class=\"nav-item\">\r\n");
      out.write("                    <a class=\"nav-link ");
      out.print( request.getServletPath().contains("vehicle") ? "active" : "" );
      out.write("\" \r\n");
      out.write("                       href=\"");
      out.print( request.getContextPath() );
      out.write("/vehicle\">Vehicles</a>\r\n");
      out.write("                </li>\r\n");
      out.write("                <li class=\"nav-item\">\r\n");
      out.write("                    <a class=\"nav-link ");
      out.print( request.getServletPath().contains("location") ? "active" : "" );
      out.write("\" \r\n");
      out.write("                       href=\"");
      out.print( request.getContextPath() );
      out.write("/location\">Locations</a>\r\n");
      out.write("                </li>\r\n");
      out.write("            </ul>\r\n");
      out.write("            <div class=\"d-flex\" id=\"authSection\">\r\n");
      out.write("                <!-- Auth buttons will be inserted here by JavaScript -->\r\n");
      out.write("            </div>\r\n");
      out.write("        </div>\r\n");
      out.write("    </div>\r\n");
      out.write("</nav>\r\n");
      out.write("\r\n");
      out.write("<!-- Login Modal -->\r\n");
      out.write("<div class=\"modal fade\" id=\"loginModal\" tabindex=\"-1\" aria-hidden=\"true\">\r\n");
      out.write("    <div class=\"modal-dialog\">\r\n");
      out.write("        <div class=\"modal-content\">\r\n");
      out.write("            <div class=\"modal-header\">\r\n");
      out.write("                <h5 class=\"modal-title\">Login Required</h5>\r\n");
      out.write("                <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\r\n");
      out.write("            </div>\r\n");
      out.write("            <div class=\"modal-body\">\r\n");
      out.write("                <form id=\"loginForm\">\r\n");
      out.write("                    <div class=\"mb-3\">\r\n");
      out.write("                        <label for=\"username\" class=\"form-label\">Username</label>\r\n");
      out.write("                        <input type=\"text\" class=\"form-control\" id=\"username\" required>\r\n");
      out.write("                    </div>\r\n");
      out.write("                    <div class=\"mb-3\">\r\n");
      out.write("                        <label for=\"password\" class=\"form-label\">Password</label>\r\n");
      out.write("                        <input type=\"password\" class=\"form-control\" id=\"password\" required>\r\n");
      out.write("                    </div>\r\n");
      out.write("                    <div id=\"loginError\" class=\"text-danger mb-3\" style=\"display:none;\">\r\n");
      out.write("                        Invalid username or password.\r\n");
      out.write("                    </div>\r\n");
      out.write("                </form>\r\n");
      out.write("            </div>\r\n");
      out.write("            <div class=\"modal-footer\">\r\n");
      out.write("                <button type=\"button\" class=\"btn btn-secondary\" data-bs-dismiss=\"modal\">Close</button>\r\n");
      out.write("                <button type=\"button\" class=\"btn btn-primary\" onclick=\"authenticate()\">Login</button>\r\n");
      out.write("            </div>\r\n");
      out.write("        </div>\r\n");
      out.write("    </div>\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("<script>\r\n");
      out.write("    // Run immediately to prevent flash of unauthenticated contentfunction() {\r\n");
      out.write("    (function() {\r\n");
      out.write("        const isAuthenticated = localStorage.getItem('authenticated') === 'true';\r\n");
      out.write("        const username = localStorage.getItem('username');\r\n");
      out.write("        function updateAuthUI() {\r\n");
      out.write("        if (isAuthenticated && username) {ocument.getElementById('authSection');\r\n");
      out.write("            document.getElementById('authSection').innerHTML = `') === 'true';\r\n");
      out.write("                <span class=\"text-light me-3 d-flex align-items-center\">Welcome, ");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${username}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("</span>\r\n");
      out.write("                <button class=\"btn btn-outline-light btn-sm\" onclick=\"logout()\">Logout</button>\r\n");
      out.write("            `;if (isAuthenticated && username) {\r\n");
      out.write("        } else {\r\n");
      out.write("            document.getElementById('authSection').innerHTML = `ht me-3 d-flex align-items-center\">Welcome, ");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${username}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("</span>\r\n");
      out.write("                <button class=\"btn btn-outline-light btn-sm\" onclick=\"showLoginModal()\">Login</button>\r\n");
      out.write("            `;\r\n");
      out.write("        } {\r\n");
      out.write("    })();Section.innerHTML = `\r\n");
      out.write("    n-outline-light btn-sm\" onclick=\"showLoginModal()\">Login</button>\r\n");
      out.write("    // Check authentication status when page loads (still needed for dynamic content)\r\n");
      out.write("    document.addEventListener('DOMContentLoaded', function() {\r\n");
      out.write("        updateAuthUI();\r\n");
      out.write("    });\r\n");
      out.write("    function showLoginModal() {\r\n");
      out.write("    function updateAuthUI() {('username').value = '';\r\n");
      out.write("        const authSection = document.getElementById('authSection');lue = '';\r\n");
      out.write("        const isAuthenticated = localStorage.getItem('authenticated') === 'true';play = 'none';\r\n");
      out.write("        const username = localStorage.getItem('username');\r\n");
      out.write("        d('loginModal'));\r\n");
      out.write("        if (isAuthenticated && username) {loginModal.show();\r\n");
      out.write("            authSection.innerHTML = `\r\n");
      out.write("                <span class=\"text-light me-3 d-flex align-items-center\">Welcome, ");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${username}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("</span>\r\n");
      out.write("                <button class=\"btn btn-outline-light btn-sm\" onclick=\"logout()\">Logout</button>unction authenticate() {\r\n");
      out.write("            `;    const username = document.getElementById('username').value;\r\n");
      out.write("        } else {ment.getElementById('password').value;\r\n");
      out.write("            authSection.innerHTML = `\r\n");
      out.write("                <button class=\"btn btn-outline-light btn-sm\" onclick=\"showLoginModal()\">Login</button>\r\n");
      out.write("            `;    localStorage.setItem('authenticated', 'true');\r\n");
      out.write("        }\r\n");
      out.write("    }\r\n");
      out.write("    tById('loginModal')).hide();\r\n");
      out.write("    function showLoginModal() {\r\n");
      out.write("        // Reset form fields and error message\r\n");
      out.write("        document.getElementById('username').value = '';t === 'function') {\r\n");
      out.write("        document.getElementById('password').value = '';\r\n");
      out.write("        document.getElementById('loginError').style.display = 'none';\r\n");
      out.write("        se {\r\n");
      out.write("        const loginModal = new bootstrap.Modal(document.getElementById('loginModal'));y = 'block';\r\n");
      out.write("        loginModal.show();\r\n");
      out.write("    }\r\n");
      out.write("    \r\n");
      out.write("    function authenticate() {out() {\r\n");
      out.write("        const username = document.getElementById('username').value;\r\n");
      out.write("        const password = document.getElementById('password').value;ocalStorage.removeItem('username');\r\n");
      out.write("           updateAuthUI();\r\n");
      out.write("        if (username === 'admin' && password === '123abc') {    window.location.href = '");
      out.print( request.getContextPath() );
      out.write("/home';\r\n");
      out.write("            // Store authentication in localStorage with no expiration\r\n");
      out.write("            localStorage.setItem('authenticated', 'true');\r\n");
      out.write("            localStorage.setItem('username', username);\r\n");
      out.write("            rage.getItem('authenticated') === 'true';\r\n");
      out.write("            // Close modal and update UI\r\n");
      out.write("            bootstrap.Modal.getInstance(document.getElementById('loginModal')).hide();\r\n");
      out.write("            updateAuthUI();                        // If there's a redirect function waiting, call it            if (typeof afterLoginRedirect === 'function') {                afterLoginRedirect();            }                        // Reload the page to ensure all authentication-dependent content is shown\r\n");
      out.write("            window.location.reload();\r\n");
      out.write("        } else {\r\n");
      out.write("            document.getElementById('loginError').style.display = 'block';\r\n");
      out.write("        }\r\n");
      out.write("    }\r\n");
      out.write("    \r\n");
      out.write("    function logout() {\r\n");
      out.write("        localStorage.removeItem('authenticated');\r\n");
      out.write("        localStorage.removeItem('username');\r\n");
      out.write("        updateAuthUI();\r\n");
      out.write("        // Redirect to home page on logout\r\n");
      out.write("        window.location.href = '");
      out.print( request.getContextPath() );
      out.write("/home';\r\n");
      out.write("    }\r\n");
      out.write("    \r\n");
      out.write("    // Check if user is authenticated\r\n");
      out.write("    function isAuthenticated() {\r\n");
      out.write("        return localStorage.getItem('authenticated') === 'true';\r\n");
      out.write("    }\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("\r\n");

    String successMessage = (String) session.getAttribute("success");
    String errorMessage = (String) session.getAttribute("error");
    if (successMessage != null) session.removeAttribute("success");
    if (errorMessage != null) session.removeAttribute("error");

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!-- Toast Container -->\r\n");
      out.write("<div class=\"position-fixed bottom-0 end-0 p-3\" style=\"z-index: 9999\">\r\n");
      out.write("    ");
 if (successMessage != null) { 
      out.write("\r\n");
      out.write("        <div class=\"toast align-items-center text-bg-success border-0 show\" role=\"alert\" aria-live=\"assertive\" aria-atomic=\"true\">\r\n");
      out.write("            <div class=\"d-flex\">\r\n");
      out.write("                <div class=\"toast-body\">");
      out.print( successMessage );
      out.write("</div>\r\n");
      out.write("                <button type=\"button\" class=\"btn-close btn-close-white me-2 m-auto\" data-bs-dismiss=\"toast\" aria-label=\"Close\"></button>\r\n");
      out.write("            </div>\r\n");
      out.write("        </div>\r\n");
      out.write("    ");
 } 
      out.write("\r\n");
      out.write("    ");
 if (errorMessage != null) { 
      out.write("\r\n");
      out.write("        <div class=\"toast align-items-center text-bg-danger border-0 show\" role=\"alert\" aria-live=\"assertive\" aria-atomic=\"true\">\r\n");
      out.write("            <div class=\"d-flex\">\r\n");
      out.write("                <div class=\"toast-body\">");
      out.print( errorMessage );
      out.write("</div>\r\n");
      out.write("                <button type=\"button\" class=\"btn-close btn-close-white me-2 m-auto\" data-bs-dismiss=\"toast\" aria-label=\"Close\"></button>\r\n");
      out.write("            </div>\r\n");
      out.write("        </div>\r\n");
      out.write("    ");
 } 
      out.write("\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("<div class=\"container mt-5\">\r\n");
      out.write("    <h2 class=\"mb-4\">All Reservations</h2>\r\n");
      out.write("\r\n");
      out.write("    <!-- Add Button -->\r\n");
      out.write("    <a href=\"");
      out.print( request.getContextPath() );
      out.write("/reservation/insert\" class=\"btn btn-primary mb-3\">Add Reservation</a>\r\n");
      out.write("\r\n");
      out.write("    ");

        List<ReservationModel> reservations = (List<ReservationModel>) request.getAttribute("reservations");
        if (reservations != null && !reservations.isEmpty()) {
    
      out.write("\r\n");
      out.write("\r\n");
      out.write("    <div class=\"table-responsive\">\r\n");
      out.write("        <table class=\"table table-bordered table-hover bg-white shadow-sm\">\r\n");
      out.write("            <thead class=\"table-light\">\r\n");
      out.write("                <tr>\r\n");
      out.write("                    <th>ID</th>\r\n");
      out.write("                    <th>User</th>\r\n");
      out.write("                    <th>Vehicle</th>\r\n");
      out.write("                    <th>Location</th>\r\n");
      out.write("                    <th>Pickup Date</th>\r\n");
      out.write("                    <th>Return Date</th>\r\n");
      out.write("                    <th>Amount</th>\r\n");
      out.write("                    <th>Actions</th>\r\n");
      out.write("                </tr>\r\n");
      out.write("            </thead>\r\n");
      out.write("            <tbody>\r\n");
      out.write("                ");
 for (ReservationModel res : reservations) { 
      out.write("\r\n");
      out.write("                <tr>\r\n");
      out.write("                    <td>");
      out.print( res.getReservationId() );
      out.write("</td>\r\n");
      out.write("                    <td>");
      out.print( res.getUserName() != null ? res.getUserName() : "N/A" );
      out.write("</td>\r\n");
      out.write("                    <td>");
      out.print( res.getVehicleName() != null ? res.getVehicleName() : "N/A" );
      out.write("</td>\r\n");
      out.write("                    <td>");
      out.print( res.getLocationName() != null ? res.getLocationName() : "N/A" );
      out.write("</td>\r\n");
      out.write("                    <td>");
      out.print( res.getPickupDate() );
      out.write("</td>\r\n");
      out.write("                    <td>");
      out.print( res.getReturnDate() );
      out.write("</td>\r\n");
      out.write("                    <td>$");
      out.print( res.getAmount() );
      out.write("</td>\r\n");
      out.write("                    <td>\r\n");
      out.write("                        <a href=\"");
      out.print( request.getContextPath() );
      out.write("/reservation?id=");
      out.print( res.getReservationId() );
      out.write("\" class=\"btn btn-sm btn-info text-white\">View</a>\r\n");
      out.write("                        <a href=\"");
      out.print( request.getContextPath() );
      out.write("/reservation/update?id=");
      out.print( res.getReservationId() );
      out.write("\" class=\"btn btn-sm btn-warning text-white\">Edit</a>\r\n");
      out.write("                        <form action=\"");
      out.print( request.getContextPath() );
      out.write("/reservation/delete\" method=\"post\" class=\"d-inline\" onsubmit=\"return confirm('Delete this reservation?');\">\r\n");
      out.write("                            <input type=\"hidden\" name=\"id\" value=\"");
      out.print( res.getReservationId() );
      out.write("\" />\r\n");
      out.write("                            <button type=\"submit\" class=\"btn btn-sm btn-danger\">Delete</button>\r\n");
      out.write("                        </form>\r\n");
      out.write("                    </td>\r\n");
      out.write("                </tr>\r\n");
      out.write("                ");
 } 
      out.write("\r\n");
      out.write("            </tbody>\r\n");
      out.write("        </table>\r\n");
      out.write("    </div>\r\n");
      out.write("\r\n");
      out.write("    <!-- Pagination -->\r\n");
      out.write("    ");

        Integer currentPage = (Integer) request.getAttribute("currentPage");
        Integer totalPages = (Integer) request.getAttribute("totalPages");

        if (currentPage != null && totalPages != null && totalPages > 1) {
    
      out.write("\r\n");
      out.write("    <nav>\r\n");
      out.write("        <ul class=\"pagination justify-content-center mt-4\">\r\n");
      out.write("            <li class=\"page-item ");
      out.print( currentPage == 1 ? "disabled" : "" );
      out.write("\">\r\n");
      out.write("                <a class=\"page-link\" href=\"?page=");
      out.print( currentPage - 1 );
      out.write("\">Previous</a>\r\n");
      out.write("            </li>\r\n");
      out.write("\r\n");
      out.write("            ");
 for (int i = 1; i <= totalPages; i++) { 
      out.write("\r\n");
      out.write("                <li class=\"page-item ");
      out.print( i == currentPage ? "active" : "" );
      out.write("\">\r\n");
      out.write("                    <a class=\"page-link\" href=\"?page=");
      out.print( i );
      out.write('"');
      out.write('>');
      out.print( i );
      out.write("</a>\r\n");
      out.write("                </li>\r\n");
      out.write("            ");
 } 
      out.write("\r\n");
      out.write("\r\n");
      out.write("            <li class=\"page-item ");
      out.print( currentPage == totalPages ? "disabled" : "" );
      out.write("\">\r\n");
      out.write("                <a class=\"page-link\" href=\"?page=");
      out.print( currentPage + 1 );
      out.write("\">Next</a>\r\n");
      out.write("            </li>\r\n");
      out.write("        </ul>\r\n");
      out.write("    </nav>\r\n");
      out.write("    ");
 } 
      out.write("\r\n");
      out.write("\r\n");
      out.write("    ");
 } else { 
      out.write("\r\n");
      out.write("        <div class=\"alert alert-warning\">No reservations found.</div>\r\n");
      out.write("    ");
 } 
      out.write("\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("<!-- Bootstrap JS and Toast Activation -->\r\n");
      out.write("<script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js\"></script>\r\n");
      out.write("<script>\r\n");
      out.write("    document.querySelectorAll('.toast').forEach(function (toastEl) {\r\n");
      out.write("        new bootstrap.Toast(toastEl, { delay: 3000 }).show();\r\n");
      out.write("    });\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
